"""
Django settings for electionsys project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

from datetime import timedelta
from electionsys.utils import check_all_okay, create_logs_dir_if_not_exists, get_config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Since this core.py file is under settings folder, we need to go one level up
BASE_DIR = Path(__file__).resolve().parent.parent.parent

check_all_okay()

# SECURITY WARNING: don't run with debug turned on in production!
# Temporarily use os.environ.get("DJANGO_DEBUG") to get the DJANGO_DEBUG value, according to that, we'll later use .env or .env.prod with python decouple
# NOTE: We can be sure that DJANGO_DEBUG is set cause check_all_okay() verifies that
DEBUG = os.environ.get("DJANGO_DEBUG")
# Print in green color
print("\033[92m---------DEBUG: {} is used---------\033[0m".format(DEBUG))

# get correct config (.env or .env.prod)

config = get_config(debug=DEBUG)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# Now use config to get environment variables
SECRET_KEY = config("DJANGO_SECRET_KEY")


ALLOWED_HOSTS = [config("DJANGO_ALLOWED_HOST_1"), config("DJANGO_ALLOWED_HOST_2")]


# Application definition
DJANGO_DEFAULT_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]


LOCAL_APPS = [
    "apps.core",
    "apps.users",
    "apps.political_party",
    "apps.political_figure",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "corsheaders",
    "safedelete",
    "django_celery_results",
    "django_celery_beat",
    "drf_spectacular",
]

if DEBUG:
    THIRD_PARTY_APPS.append("django_extensions")

INSTALLED_APPS = DJANGO_DEFAULT_APPS + LOCAL_APPS + THIRD_PARTY_APPS


MIDDLEWARE = [
    # cors middleware
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    # django-currentuser middleware
    "django_currentuser.middleware.ThreadLocalUserMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "electionsys.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "electionsys.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": config("DJANGO_DB_ENGINE"),
        "NAME": config("DJANGO_DB_NAME"),
        "USER": config("DJANGO_DB_USER"),
        "PASSWORD": config("DJANGO_DB_PASSWORD"),
        "HOST": config("DJANGO_DB_HOST"),
        "PORT": config("DJANGO_DB_PORT"),
    },
    "sqlite": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"

# Where your source static files live during development
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Your app's static files
]
# Apparently files from STATICFILES_DIRS will be available in STATIC_ROOT if we use collectstatic command
# Where collectstatic puts all static files (production only)
STATIC_ROOT = BASE_DIR / "collected_static"

# media files
MEDIA_ROOT = BASE_DIR / "media"
MEDIA_URL = "/media/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# cors

# Don't use CORS_ALLOW_ALL_ORIGINS = True with CORS_ALLOW_CREDENTIALS = True. It will silently fail due to CORS policy.

CORS_ALLOWED_ORIGINS = [
    config("DJANGO_FRONTEND_URL"),
]

# CORS_ORIGIN_WHITELIST = ()

CORS_EXPOSE_HEADERS = [
    "Content-Type",
    "Authorization",
    "X-RateLimit-Limit",
]

CORS_ALLOW_CREDENTIALS = True

AUTH_USER_MODEL = "users.User"


# rest framework settings
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
        "utils.core.permissions.IsSuper",
    ],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",        
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "EXCEPTION_HANDLER": "utils.core.exception_handler.custom_exception_handler",
    "DEFAULT_SCHEMA_CLASS": 'drf_spectacular.openapi.AutoSchema'
}


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    
    'TOKEN_OBTAIN_SERIALIZER': 'apps.users.serializers.CustomTokenObtainPairSerializer',
}

# This is needed if we need to send file's url from the backend
BACKEND_MEDIA_DOMAIN = config("DJANGO_BACKEND_MEDIA_DOMAIN")

SPECTACULAR_SETTINGS = {
    "TITLE": "ElectionSys API",
    "DESCRIPTION": "API for election candidates (OSNepal backend)",
    "VERSION": "1.0.0",
    "SCHEMA_PATH_PREFIX": "/api",
}


STORE_LOGS = config("DJANGO_STORE_LOGS", default=False, cast=bool)
if STORE_LOGS:
    create_logs_dir_if_not_exists()

    LOGGING = {
        "version": 1,
        "disable_existing_loggers": False,
        "formatters": {
            "verbose": {
                "format": "{levelname} {asctime} {pathname}:{lineno} {message}",  # Add pathname and lineno,
                "style": "{",
            },
            "simple": {
                "format": "{levelname} {message}",
                "style": "{",
            },
        },
        "handlers": {
            # NOTE: To avoid a log file becoming too large, use a RotatingFileHandler that will rotate the log file when it reaches a certain size.
            "django_file_rotate": {
                "level": "DEBUG",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": os.path.join(BASE_DIR, "logs", "django_rotate.log"),
                "maxBytes": 1024 * 1024 * 10,  # 10 MB
                "backupCount": 3,  # 3 latest backup files
                "formatter": "verbose",
            },
            "email_submission_handler": {
                "level": "DEBUG",
                "class": "logging.handlers.RotatingFileHandler",
                "filename": os.path.join(BASE_DIR, "logs", "email_submission.log"),
                "maxBytes": 1024 * 1024 * 5,  # 5 MB
                "backupCount": 3,  # 3 latest backup files
                "formatter": "verbose",
            },
            "console": {
                "level": "INFO",
                "class": "logging.StreamHandler",
                "formatter": "simple",
            },
        },
        "loggers": {
            "django": {
                "handlers": ["console", "django_file_rotate"],
                "level": "DEBUG",
                "propagate": True,
            },
            # For future, when we need to send emails
            "email_submission": {
                "handlers": ["console", "email_submission_handler"],
                "level": "DEBUG",
                "propagate": False,
            },
        },
    }
